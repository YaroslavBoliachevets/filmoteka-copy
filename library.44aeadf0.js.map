{"mappings":"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","sources":["src/js/portfolio/movieClass.js","src/js/portfolio/genres.js","src/js/portfolio/createGalleryMarkup.js","src/js/refs.js","src/js/portfolio/createStartPortfolio.js","src/js/modal/btnModalClass.js","src/js/portfolio/modalFilm.js","src/js/portfolio/searchByName.js","src/js/modal/modalAddToLSWatchedQueue.js","src/js/theme-toggle.js"],"sourcesContent":["export {\n\tmovieClass\n  };\n  \n  // ================================class Movie======================================\n  const movieClass = new class Movie {\n\tconstructor() {\n\t\tthis.storageWatched = [];\n\t\tthis.storageQueue = [];\n\t}\n\tasync fetchPopularMovies() {\n\t  const response = await fetch(\n\t\t'https://api.themoviedb.org/3/trending/all/day?api_key=5692dca6012d3660a336300872bd664c'\n\t  );\n\t  return await response.json();\n\t}\n  \n\tsaveToLocalStorageFindedFilms(films) {\n\t  localStorage.setItem('findFilms', JSON.stringify(films.results));\n\t}\n\n\tsaveToLibraryMovieInLS(film, actions) {\t\t\n\t\t// console.log(`фильм сохранен в LS ${actions}`);\n\t\tlet filmArray = this.getFromLS(`${actions}`);\n\t\tif (!filmArray){ filmArray =[]}\n\n\t\tfilmArray.push(film);\n\t\t// console.log('actions, filmArray', actions, filmArray);\n\t\tlocalStorage.setItem(`${actions}`, JSON.stringify(filmArray));\n\t}\n\n\tremoveFromLibraryMovieInLS(filmToRemove, actions) {\n\t\t// console.log(`фильм удален из LS ${actions}`);\n\t\t\n\t\tlet filmArray = this.getFromLS(`${actions}`);\n\t\tconst removeIndex = filmArray.findIndex(film => film.id == filmToRemove.id);\n\n\t\tfilmArray.splice(removeIndex, 1);\n\t\t\n\t\tlocalStorage.setItem(`${actions}`, JSON.stringify(filmArray));\n\t}\n\n\tchangeModalBtnName(li, actions) {\n\t}\n\n\tgetFromLS(key) {\n\t\tconst value = localStorage.getItem(`${key}`);\n\t\t\n\t\ttry{\n\t\t\t// console.log('JSON.parse(value)', JSON.parse(value));\n\t\treturn JSON.parse(value);\n\t\t} catch(error) {\n\t\t\tif (error.name ==='SyntaxError') {\n\t\t\t\tconsole.log('Ошибка парса JSON', );\n\t\t\t}\n\t\t}\n\t}\n\n\tisModalFilmIncludesLS(id, actions) {\n\t\tconst filmsArray = movieClass.getFromLS(actions);\n\t\tif (filmsArray === null) {\n\t\t\t// return console.log('фильма нет в локал сторидж', );\n\t\t}\n\n\t\treturn filmsArray.find(film => {\n\t\t  if (film.id == id) {\n\t\t\t// return console.log('фильм уже есть в локал сторидж', );\n\t\t\t\n\t\t  }\n\t\t});\n\t  }\n\n\n\tmodifyDate(release_date, first_air_date) {\n\t  // в некоторых нет даты релиза, используют дату первого полета\n\t  if (release_date) {\n\t\treturn release_date.slice(0, 4);\n\t  } else if (first_air_date) {\n\t\treturn first_air_date.slice(0, 4);\n\t  }\n\t  return '';\n\t}\n  \n\tmodifyGenres(genre_ids) {\n\t  const genresArray = [];\n\t  for (let id of genre_ids) {\n\t\t// если название пустое -- пропускаем\n\t\tif (allGenres[id] === null || allGenres[id] === undefined) {\n\t\t  continue;\n\t\t}\n  \n\t\t// если массив 2+ жанров -- пишем 'Other'\n\t\tif (genresArray.length === 2) {\n\t\t  genresArray.push('Other');\n\t\t  break;\n\t\t}\n\t\tgenresArray.push(allGenres[id]);\n\t  }\n\t  return Object.values(genresArray).join(', ');\n\t}\n  \n\tmakeGenresList(genre_ids, genres) {\n\t  const genresArray = [];\n\t  for (let id of genre_ids) {\n\t\tif (genres[id] === null || genres[id] === undefined) {\n\t\t  continue;\n\t\t}\n\t\t// если массив 2+ жанров -- пишем 'Other'\n\t\tif (genresArray.length === 2) {\n\t\t  genresArray.push('Other');\n\t\t  break;\n\t\t}\n\t\tgenresArray.push(genres[id].name);\n\t  }\n\t  return Object.values(genresArray).join(', ');\n\t}\n  \n\tmakeAllMoodalGenresList(genre_ids, genres) {\n\t\tconst genresArray = [];\n\t\tfor (let id of genre_ids) {\n\t\t  if (genres[id] === null || genres[id] === undefined) {\n\t\t\tcontinue;\n\t\t  }\n\t\t  genresArray.push(genres[id].name);\n\t\t}\n\t\treturn Object.values(genresArray).join(', ');\n\t  }\n\n\tparseFindedFilms() {\n\t  const value = localStorage.getItem('findFilms');\n\t  let parsedFindedFilmsFromLS = [];\n\t  try {\n\t\tparsedFindedFilmsFromLS = JSON.parse(value);\n\t  } catch (error) {\n\t\tif (error.name === 'SyntaxError') {\n\t\t  console.log('Ошибка парса JSON');\n\t\t}\n\t  }\n\t  return parsedFindedFilmsFromLS;\n\t}\n  \n\tsearchFilmByIdInLS(id) {\n\t  const parsedFindedFilmsFromLS = movieClass.parseFindedFilms();\n\t  return parsedFindedFilmsFromLS.find(film => {\n\t\tif (film.id == id) {\n\t\t  return film;\n\t\t}\n\t  });\n\t}\n  }\n  \n  \n\n\n\n  // ============================Genres (not use)=====================\n  class Genres {\n\tconstructor() {}\n\t// Возвращает объект с жанрами в виде ключ-значение\n\tchangeGenresToBeUsable(genresArray, newGenresObj = {}) {\n\t  genresArray.genres.map(genre => {\n\t\tnewGenresObj[genre.id] = genre.name;\n\t\treturn newGenresObj;\n\t  });\n\t}\n  \n\t// Парсит жанры из локал сторидж\n\tasync parseGenres() {\n\t  await this.saveGenres();\n\t  const value = localStorage.getItem('genres');\n\t  let parseGanres = {};\n\t  try {\n\t\tparseGanres = JSON.parse(value);\n\t  } catch (error) {\n\t\tconsole.log(error);\n\t\tif (error.name === 'SyntaxError') {\n\t\t  console.log('Ошибка парса JSON');\n\t\t}\n\t  }     \n\t  return parseGanres;\n\t}\n  \n\t// Сохраняет id всех жанров в локал сторидж\n\tasync saveGenres() {\n\t  try {\n\t\treturn await this.fetchGenresList().then(genresArray => {\n\t\t  const newGenresObj = {};\n\t\t  this.changeGenresToBeUsable(genresArray, newGenresObj);\n  \n\t\t  return localStorage.setItem('genres', JSON.stringify(newGenresObj));\n\t\t});\n\t  } catch (error) {\n\t\tconsole.log(error);\n\t  }\n\t}\n  \n\t// Посылает запрос за id всех жанров\n\tasync fetchGenresList() {\n\t  const genres = await fetch(\n\t\t'https://api.themoviedb.org/3/genre/movie/list?api_key=5692dca6012d3660a336300872bd664c&language=en-US'\n\t  );\n\t  return await genres.json();\n\t}\n  \n\t// Получает id возвращает массив с названиями жанров\n\tmakeGenresArrayMarkup(genre_ids, parsedGenres) {\n\t  const genresArray = [];\n  \n\t  for (id of genre_ids) {\n\t\t// если название пустое -- пропускаем\n\t\tif (parsedGenres[id] === null || parsedGenres[id] === undefined) {\n\t\t  continue;\n\t\t}\n  \n\t\t// если массив 2+ жанров -- пишем 'Other'\n\t\tif (genresArray.length === 2) {\n\t\t  genresArray.push('Other');\n\t\t  break;\n\t\t}\n\t\tgenresArray.push(parsedGenres[id]);\n\t  }\n\t  return Object.values(genresArray).join(', ');\n\t}\n  }\n  const genresClass = new Genres();\n  const parsedGenres = genresClass.parseGenres();\n  const allGenres = genresClass.parseGenres();\n  ","export default genres = [\n\t{\n\t\"id\": 28,\n\t\"name\": \"Action\"\n\t},\n\t{\n\t\"id\": 12,\n\t\"name\": \"Adventure\"\n\t},\n\t{\n\t\"id\": 16,\n\t\"name\": \"Animation\"\n\t},\n\t{\n\t\"id\": 35,\n\t\"name\": \"Comedy\"\n\t},\n\t{\n\t\"id\": 80,\n\t\"name\": \"Crime\"\n\t},\n\t{\n\t\"id\": 99,\n\t\"name\": \"Documentary\"\n\t},\n\t{\n\t\"id\": 18,\n\t\"name\": \"Drama\"\n\t},\n\t{\n\t\"id\": 10751,\n\t\"name\": \"Family\"\n\t},\n\t{\n\t\"id\": 14,\n\t\"name\": \"Fantasy\"\n\t},\n\t{\n\t\"id\": 36,\n\t\"name\": \"History\"\n\t},\n\t{\n\t\"id\": 27,\n\t\"name\": \"Horror\"\n\t},\n\t{\n\t\"id\": 10402,\n\t\"name\": \"Music\"\n\t},\n\t{\n\t\"id\": 9648,\n\t\"name\": \"Mystery\"\n\t},\n\t{\n\t\"id\": 10749,\n\t\"name\": \"Romance\"\n\t},\n\t{\n\t\"id\": 878,\n\t\"name\": \"Science Fiction\"\n\t},\n\t{\n\t\"id\": 10770,\n\t\"name\": \"TV Movie\"\n\t},\n\t{\n\t\"id\": 53,\n\t\"name\": \"Thriller\"\n\t},\n\t{\n\t\"id\": 10752,\n\t\"name\": \"War\"\n\t},\n\t{\n\t\"id\": 37,\n\t\"name\": \"Western\"\n\t}\n\t]","import { movieClass } from './movieClass';\nimport genres from './genres';\n\nexport { createMurkup };\n\nfunction createMurkup({\n  original_title,\n  original_name,\n  id,\n  genre_ids,\n  release_date,\n  first_air_date,\n  poster_path,\n}) {\n  // проверка дает ли бэк original_title\n  if (!original_title) {\n    original_title = original_name;\n  }\n\n  return `<li class=\"gallery_card__item\" data-id=${id}>\n  <a href=\"./\" class=\"gallery_card__link\">\n      <div class=\"gallery_thumb\">\n          <img src=https://image.tmdb.org/t/p/w500${poster_path} alt=\"movie cover\" loading='lazy' class=\"gallery_card__img\">\n      </div>\n      <div class=\"gallery_info\">\n          <h3 class=\"gallery_info__name\">${original_title}</h3>\n          <div class = \"gallery_info__about\">\n              <p class = \"gallery_info__genres\">${movieClass.makeGenresList(genre_ids, genres)}</p>\n              <p class = \"gallery_info__separator\">|</p>\n              <p class = \"gallery_info__year\">${movieClass.modifyDate(\n                release_date,\n                first_air_date\n              )}</p>\n          </div>\n      </div>\n  </a>\n</li>`;\n}","export { refs };\nconst refs = {\n  gallery: document.querySelector('.js-gallery__list'),\n  backdrop: document.querySelector('#backdrop'),\n  body: document.querySelector('body'),\n  btnCloseModalFilm: document.querySelector('#btn-close-modal'),\n  imageModal: document.querySelector('#imageModal'),\n  modalTitle: document.querySelector('#title'),\n  modalTitleOriginal: document.querySelector('#titleOriginal'),\n  voteModal: document.querySelector('#vote'),\n  votesModal: document.querySelector('#votes'),\n  popularityModal: document.querySelector('#popularity'),\n  genreModal: document.querySelector('#genre'),\n  overviewModal: document.querySelector('#overview'),\n  gallery: document.querySelector('.js-gallery__list'),\n  modalBtn: document.querySelector('.js-modal-button'),\n  searchForm: document.querySelector('.search'),\n  searchError: document.querySelector('.search-error'),\n  searchFormContainer: document.querySelector('.search-form-container'),\n  modalBtnWatched: document.querySelector('[data-actions=\"watched\"]'),\n  modalBtnQueue: document.querySelector('[data-actions=\"queue\"]'),\n};\n","// Генерирует разметку популярных фильмов, первой страницы\nexport default createStartPortfolio();\n\nimport { createMurkup } from './createGalleryMarkup';\nimport { refs } from '../refs';\nimport { movieClass } from './movieClass';\n\nasync function createStartPortfolio() {\n  return await movieClass.fetchPopularMovies().then(films => {\n    movieClass.saveToLocalStorageFindedFilms(films);\n\n    return refs.gallery.insertAdjacentHTML(\n      'beforeend',\n      films.results\n        .map(film => {\n          return createMurkup(film);\n        })\n        .join('')\n    );\n  });\n}\n","import { refs } from '../refs';\nimport {movieClass} from '../portfolio/movieClass';\n\nexport { btnModalClass };\n\nconst btnModalClass = new class BtnModal {\n   isFilmIncludesLSLibrary(id, actions) {\n    const filmsArray = movieClass.getFromLS(`${actions}`);\n\t\tif (filmsArray === null) {\n\t\t\treturn false \n\t\t}\n\n\t\treturn filmsArray.find(film => {\n\t\t  if (film.id == id) {\n\t\t\treturn true\n\t\t\t\n\t\t  }\n\t\t});\n  }\n\n  isFilmIncludesLSQueue(id) {\n    const filmsArray = movieClass.getFromLS(\"queue\");\n\t\tif (filmsArray === null) {\n\t\t\treturn false \n\t\t}\n\n\t\treturn filmsArray.find(film => {\n\t\t  if (film.id == id) {\n\t\t\treturn true\n\t\t\t\n\t\t  }\n\t\t});\n  }\n\n  changeWatchedBtnName() {\n\trefs.modalBtnWatched.textContent = 'in watched list';\n  }\n\n  isFilmIncludesLSQueue() {\n\trefs.modalBtnWatched.textContent = 'in queue list';\n  }\n  \n}\n","import { refs } from '../refs';\nimport { movieClass } from './movieClass';\n// import { genres } from './genres';\nimport genres from './genres';\nimport { btnModalClass } from '../modal/btnModalClass';\n\n// console.log('genresModal', genres);\nrefs.gallery.addEventListener('click', onFilmCardClick);\n\nfunction onFilmCardClick(e) {\n  e.preventDefault();\n  clearInfoModal();\n\n  const li = e.target.closest('li');\n  if (!li) return;\n  const id = li.getAttribute('data-id');\n\n  const film = movieClass.searchFilmByIdInLS(id);\n  const genresList = movieClass.makeAllMoodalGenresList(film.genre_ids, genres);\n  // console.log('film:', film);\n\n  refs.searchFormContainer.style.display = 'none';\n\n  const URL_IMG = 'https://image.tmdb.org/t/p/w500';\n  refs.modalBtnQueue.setAttribute('data-id', `${id}`);\n  refs.modalBtnWatched.setAttribute('data-id', `${id}`);\n  refs.imageModal.src = `${URL_IMG}${film.poster_path}`;\n  refs.modalTitle.textContent = `${film.title ? film.title : film.name}`;\n  refs.modalTitleOriginal.textContent = `${\n    film.original_title ? film.original_title : film.original_name\n  }`;\n  refs.voteModal.textContent = `${film.vote_average.toFixed(2)}`;\n  refs.votesModal.textContent = `${film.vote_count}`;\n  refs.popularityModal.textContent = `${film.popularity}`;\n  refs.genreModal.textContent = `${genresList}`;\n  refs.overviewModal.textContent = `${film.overview}`;\n\n  refs.backdrop.style.background = `url(${URL_IMG}${film.backdrop_path}) no-repeat center`;\n  refs.backdrop.style.backgroundSize = 'cover';\n\n  refs.backdrop.classList.remove('is-hidden');\n  refs.body.classList.add('backdrop-body-block-scroll');\n\n  checkStartBtn(id, refs.modalBtnWatched, refs.modalBtnWatched.getAttribute('data-actions'));\n  checkStartBtn(id, refs.modalBtnQueue,  refs.modalBtnQueue.getAttribute('data-actions'));\n}\n\nrefs.btnCloseModalFilm.addEventListener('click', closeModal);\n\nwindow.addEventListener('keydown', onEscPress);\nfunction onEscPress(e) {\n  if (e.key === 'Escape') {\n    closeModal();\n  }\n}\n\nrefs.backdrop.addEventListener('click', onCloseBackdropClick);\nfunction onCloseBackdropClick(e) {\n  if (e.target === e.currentTarget) {\n    closeModal();\n  }\n}\n\nfunction closeModal() {\n  refs.searchFormContainer.style.display = null;\n  refs.backdrop.classList.add('is-hidden');\n  refs.body.classList.remove('backdrop-body-block-scroll');\n}\nfunction clearInfoModal() {\n  refs.imageModal.src = ``;\n  refs.modalTitle.textContent = ``;\n  refs.modalTitleOriginal.textContent = ``;\n  refs.voteModal.textContent = ``;\n  refs.votesModal.textContent = ``;\n  refs.popularityModal.textContent = ``;\n  refs.genreModal.textContent = ``;\n  refs.overviewModal.textContent = ``;\n}\n\nfunction checkStartBtn(id, btn, actions) {\n  if (btnModalClass.isFilmIncludesLSLibrary(id, actions)) {\n    btn.textContent = `remove from ${actions}`;\n  } else {\n    btn.textContent = `add to ${actions}`;\n  }\n}","import { refs } from '../refs';\nimport { createMurkup } from './createGalleryMarkup';\n// import { saveToLocalStorageFindedFilms } from './localStorage';\nimport { movieClass } from './movieClass';\n\nif (refs.searchForm) {\n  refs.searchForm.addEventListener('submit', handleSubmit);\n}\n// console.log(refs.searchError);\n// refs.searchError.style.visibility = 'hidden';\nlet page = 1;\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { search },\n  } = event.currentTarget;\n  searchQuery = search.value.trim();\n\n  if (searchQuery !== '') {\n    createSearchedPortfolio(searchQuery);\n    event.currentTarget.reset();\n  }\n  return searchQuery;\n}\n\nasync function fetchSearchedMovies(searchQuery) {\n  try {\n    page = 1;\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=5692dca6012d3660a336300872bd664c&language=en-US&page=${page}&include_adult=false&query=${searchQuery}`\n    );\n    return await response.json();\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function createSearchedPortfolio(input) {\n  return await fetchSearchedMovies(input).then(films => {\n    if (films.total_results !== 0) {\n      // saveToLocalStorageFindedFilms(films);\n      movieClass.saveToLocalStorageFindedFilms(films);\n      refs.gallery.innerHTML = '';\n      return refs.gallery.insertAdjacentHTML(\n        'beforeend',\n        films.results\n          .map(film => {\n            return createMurkup(film);\n          })\n          .join('')\n      );\n    }\n    refs.searchError.style.visibility = 'visible';\n    setTimeout(onSearchError, 2000);\n  });\n}\n\nconst onSearchError = () => {\n  refs.searchError.style.visibility = 'hidden';\n};\n","import { refs } from '../refs';\nimport { movieClass } from '../portfolio/movieClass';\nimport { btnModalClass } from './btnModalClass';\n\nrefs.modalBtn.addEventListener('click', onModalBtnClick);\n\nfunction onModalBtnClick(evt) {\n  evt.preventDefault();\n\n  const liBtn = evt.target.closest('li');\n  if (!liBtn) return;\n\n  const id = liBtn.getAttribute('data-id');\n  const actions = liBtn.getAttribute('data-actions');\n  const film = movieClass.searchFilmByIdInLS(id);\n  // console.log('film:', film,  'actions:', actions, 'id:', id, 'liBtn', liBtn);\n\n  if (btnModalClass.isFilmIncludesLSLibrary(id, actions)) {\n    movieClass.removeFromLibraryMovieInLS(film, actions);\n  } else {\n    movieClass.saveToLibraryMovieInLS(film, actions);\n  }\n\n  // if (  btnModalClass.isFilmIncludesLSQueue(id)) {movieClass.removeFromLibraryMovie(film, actions)} else{\n  //   movieClass.saveToLibraryMovieInLS(film, actions);\n  // }\n}\n","const storageKey = 'preference-theme';\nconst refs = {\n    body: document.querySelector('body'),\n    infoNames: document.querySelectorAll('.gallery_info__name'),\n    themeBtn: document.querySelector('.theme-toggle'),\n    lightToggleIcon: document.querySelector('.lightToggleIcon'),\n    darkToggleIcon: document.querySelector('.darkToggleIcon')\n}\n\n// console.log(refs.themeBtn);\n// console.log(refs.body);\n// console.log(refs.infoNames);\n\nupdateTheme();\n\n\nrefs.themeBtn.addEventListener('click', toggleTheme);\n\nfunction toggleTheme(event) {\n    event.preventDefault();\n    const result = refs.themeBtn.classList.toggle('js-light');\n    // console.log(result);\n    if (result) {\n        theme = 'light';\n        refs.body.classList.remove('dark');\n        refs.darkToggleIcon.classList.add('is-hidden');\n        refs.lightToggleIcon.classList.remove('is-hidden');\n        // refs.infoNames.map(infoName => infoName.classList.remove('darkText'));\n    } else {\n        theme = \"dark\";\n        refs.body.classList.add('dark');\n        refs.lightToggleIcon.classList.add('is-hidden');\n        refs.darkToggleIcon.classList.remove('is-hidden');\n        // refs.infoNames.map(infoName => infoName.classList.add('darkText'));\n    }\n    // console.log(theme);\n    localStorage.setItem(\"preference-theme\", theme);\n}\nfunction updateTheme() {\n    theme = localStorage.getItem('preference-theme');\n    // console.log(theme);\n    if (theme === 'light') {\n        refs.body.classList.remove('dark');\n        refs.themeBtn.classList.add('js-light');\n        refs.lightToggleIcon.classList.remove('is-hidden');\n        refs.darkToggleIcon.classList.add('is-hidden');\n        // refs.infoNames.map(infoName => infoName.classList.remove('darkText'));\n        \n    } else {\n        refs.body.classList.add('dark');\n        refs.themeBtn.classList.remove('js-light');\n        refs.lightToggleIcon.classList.add('is-hidden');\n        refs.darkToggleIcon.classList.remove('is-hidden');\n        // refs.infoNames.map(infoName => infoName.classList.add('darkText'));\n\n    }\n}"],"names":["$80ce887b25c2db71$export$433960ea2466dd22","async","response","fetch","json","saveToLocalStorageFindedFilms","films","localStorage","setItem","JSON","stringify","results","saveToLibraryMovieInLS","film","actions","filmArray","this","getFromLS","push","removeFromLibraryMovieInLS","filmToRemove","removeIndex","findIndex","id","splice","changeModalBtnName","li","key","value","getItem","parse","error","name","console","log","isModalFilmIncludesLS","filmsArray","find","modifyDate","release_date","first_air_date","slice","modifyGenres","genre_ids","genresArray","$80ce887b25c2db71$var$allGenres","undefined","length","Object","values","join","makeGenresList","genres","makeAllMoodalGenresList","parseFindedFilms","parsedFindedFilmsFromLS","searchFilmByIdInLS","constructor","storageWatched","storageQueue","$80ce887b25c2db71$var$genresClass","changeGenresToBeUsable","newGenresObj","map","genre","saveGenres","parseGanres","fetchGenresList","then","makeGenresArrayMarkup","parsedGenres1","parseGenres","$f3cbc78d166f0e2b$export$2e2bcd8739ae039","$2f2baa788713cbe4$export$ad754d85cf33dc3f","original_title","original_name","poster_path","$ee27a4d7c64fc8c4$export$21666b427502ea6d","gallery","document","querySelector","backdrop","body","btnCloseModalFilm","imageModal","modalTitle","modalTitleOriginal","voteModal","votesModal","popularityModal","genreModal","overviewModal","modalBtn","searchForm","searchError","searchFormContainer","modalBtnWatched","modalBtnQueue","fetchPopularMovies","insertAdjacentHTML","$bfd7031ae10fe513$var$createStartPortfolio","$57403ffcb9b81886$export$32eb4bdee116a854","isFilmIncludesLSLibrary","isFilmIncludesLSQueue","changeWatchedBtnName","textContent","$bdbe1fc36a31795c$var$closeModal","style","display","classList","add","remove","$bdbe1fc36a31795c$var$checkStartBtn","btn","addEventListener","e","preventDefault","src","target","closest","getAttribute","genresList","URL_IMG","setAttribute","title","vote_average","toFixed","vote_count","popularity","overview","background","backdrop_path","backgroundSize","window","currentTarget","event","elements","search","searchQuery","trim","input","$fba2a2085e2d00fb$var$page","$fba2a2085e2d00fb$var$fetchSearchedMovies","total_results","innerHTML","visibility","setTimeout","$fba2a2085e2d00fb$var$onSearchError","$fba2a2085e2d00fb$var$createSearchedPortfolio","reset","evt","liBtn","$efe9be9ba36ff704$var$refs","infoNames","querySelectorAll","themeBtn","lightToggleIcon","darkToggleIcon","theme","toggle"],"version":3,"file":"library.44aeadf0.js.map"}